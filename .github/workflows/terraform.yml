name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:

      # GitHub Actions 기본 컨테이너 환경을 구축함.
      - name: Checkout
        uses: actions/checkout@v2

      # 테라폼 CLI를 설정함. 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} 
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
      
      # 파일 포맷
      - name: Terraform Formats
        id: fmt
        run: terraform fmt -diff

      # 설정 파일 바탕으로 terraform init
      - name: Terraform Init
        id: init
        run: terraform init
      
      # 검증
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_VAR_db_username=${{ secrets.TF_VAR_DB_USERNAME }}
          export TF_VAR_db_password=${{ secrets.TF_VAR_DB_PASSWORD }}
          terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Terraform으로 인프라 생성
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: | 
          terraform apply -auto-approve
          